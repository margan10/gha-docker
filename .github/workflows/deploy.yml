name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
      - master
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    container: node:16 #this is all I need to run my jobs on a containter in this example I selected node container
    env:
      #MONGODB_CONNECTION_PROTOCOL: mongodb+srv this was without the container service to use my mongodb
      #MONGODB_CLUSTER_ADDRESS: cluster0.ymp5di9.mongodb.net #configured to reflect my mongodb, this was without the container service to use my mongodb
      #this was used to targer my db from containter MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }} #added to github secrets on environment level
      #this was used to targer my db from containter MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}      
      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_CLUSTER_ADDRESS: mongodb-could-be-enything #this can be used if the job runs in container as there is a link between container and services in image
      MONGODB_USERNAME: root #need the same credentials when using services mongo image
      MONGODB_PASSWORD: example 
      PORT: 8080
    services:
      mongodb-could-be-enything: 
        image: mongo #services always run in container so I have to add image key and define base image (docker hub)
        env: #this specific image requires at least 2 env 
          MONGODB_USERNAME: root
          MONGODB_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
